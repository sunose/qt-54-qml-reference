<!--?xml version="1.0" encoding="UTF-8"?-->
<!DOCTYPE html>
<html lang="en"><head><script src="file://www.google.com/jsapi?_=1426744572262" async=""></script>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<!-- basics.qdoc -->
  <title>QML 基本语法 | Qt QML 5.4</title>
  <link rel="stylesheet" type="text/css" href="QML%20Syntax%20Basics%20_%20Qt%20QML%205.4_zh_files/online.css">
  <link rel="shortcut icon" href="http://d3hp9ud7yvwzy0.cloudfront.net/wp-content/themes/oneqt/images/favicon.ico.gzip">
  <link rel="stylesheet" href="QML%20Syntax%20Basics%20_%20Qt%20QML%205.4_zh_files/defaulten_003.css" type="text/css"><link rel="stylesheet" href="QML%20Syntax%20Basics%20_%20Qt%20QML%205.4_zh_files/default_002.css" type="text/css"><script src="QML%20Syntax%20Basics%20_%20Qt%20QML%205.4_zh_files/defaulten_003.js" type="text/javascript"></script><script src="QML%20Syntax%20Basics%20_%20Qt%20QML%205.4_zh_files/a.htm" type="text/javascript"></script><link rel="stylesheet" href="QML%20Syntax%20Basics%20_%20Qt%20QML%205.4_zh_files/defaulten.css" type="text/css"><link rel="stylesheet" href="QML%20Syntax%20Basics%20_%20Qt%20QML%205.4_zh_files/default.css" type="text/css"><script src="QML%20Syntax%20Basics%20_%20Qt%20QML%205.4_zh_files/defaulten_002.js" type="text/javascript"></script><style type="text/css">
.gsc-control-cse {
font-family: Arial, sans-serif;
border-color: #FFFFFF;
background-color: #FFFFFF;
}
.gsc-control-cse .gsc-table-result {
font-family: Arial, sans-serif;
}
input.gsc-input {
border-color: #D9D9D9;
}
input.gsc-search-button {
border-color: #5CAA15;
background-color: #5CAA15;
}
.gsc-tabHeader.gsc-tabhInactive {
border-color: #E9E9E9;
background-color: #E9E9E9;
}
.gsc-tabHeader.gsc-tabhActive {
border-top-color: #5CAA15;
border-left-color: #E9E9E9;
border-right-color: #E9E9E9;
background-color: #FFFFFF;
}
.gsc-tabsArea {
border-color: #E9E9E9;
}
.gsc-webResult.gsc-result,
.gsc-results .gsc-imageResult {
border-color: #FFFFFF;
background-color: #FFFFFF;
}
.gsc-webResult.gsc-result:hover,
.gsc-imageResult:hover {
border-color: #FFFFFF;
background-color: #FFFFFF;
}
.gsc-webResult.gsc-result.gsc-promotion:hover {
border-color: #FFFFFF;
background-color: #FFFFFF;
}
.gs-webResult.gs-result a.gs-title:link,
.gs-webResult.gs-result a.gs-title:link b,
.gs-imageResult a.gs-title:link,
.gs-imageResult a.gs-title:link b {
color: #5CAA15;
}
.gs-webResult.gs-result a.gs-title:visited,
.gs-webResult.gs-result a.gs-title:visited b,
.gs-imageResult a.gs-title:visited,
.gs-imageResult a.gs-title:visited b {
color: #46A2DA;
}
.gs-webResult.gs-result a.gs-title:hover,
.gs-webResult.gs-result a.gs-title:hover b,
.gs-imageResult a.gs-title:hover,
.gs-imageResult a.gs-title:hover b {
color: #46A2DA;
}
.gs-webResult.gs-result a.gs-title:active,
.gs-webResult.gs-result a.gs-title:active b,
.gs-imageResult a.gs-title:active,
.gs-imageResult a.gs-title:active b {
color: #5CAA15;
}
.gsc-cursor-page {
color: #5CAA15;
}
a.gsc-trailing-more-results:link {
color: #5CAA15;
}
.gs-webResult .gs-snippet,
.gs-imageResult .gs-snippet,
.gs-fileFormatType {
color: #404244;
}
.gs-webResult div.gs-visibleUrl,
.gs-imageResult div.gs-visibleUrl {
color: #5CAA15;
}
.gs-webResult div.gs-visibleUrl-short {
color: #5CAA15;
}
.gs-webResult div.gs-visibleUrl-short {
display: none;
}
.gs-webResult div.gs-visibleUrl-long {
display: block;
}
.gs-promotion div.gs-visibleUrl-short {
display: none;
}
.gs-promotion div.gs-visibleUrl-long {
display: block;
}
.gsc-cursor-box {
border-color: #FFFFFF;
}
.gsc-results .gsc-cursor-box .gsc-cursor-page {
border-color: #E9E9E9;
background-color: #FFFFFF;
color: #5CAA15;
}
.gsc-results .gsc-cursor-box .gsc-cursor-current-page {
border-color: #5CAA15;
background-color: #FFFFFF;
color: #46A2DA;
}
.gsc-webResult.gsc-result.gsc-promotion {
border-color: #404244;
background-color: #FFFFFF;
}
.gsc-completion-title {
color: #5CAA15;
}
.gsc-completion-snippet {
color: #404244;
}
.gs-promotion a.gs-title:link,
.gs-promotion a.gs-title:link *,
.gs-promotion .gs-snippet a:link {
color: #0000CC;
}
.gs-promotion a.gs-title:visited,
.gs-promotion a.gs-title:visited *,
.gs-promotion .gs-snippet a:visited {
color: #0000CC;
}
.gs-promotion a.gs-title:hover,
.gs-promotion a.gs-title:hover *,
.gs-promotion .gs-snippet a:hover {
color: #0000CC;
}
.gs-promotion a.gs-title:active,
.gs-promotion a.gs-title:active *,
.gs-promotion .gs-snippet a:active {
color: #0000CC;
}
.gs-promotion .gs-snippet,
.gs-promotion .gs-title .gs-promotion-title-right,
.gs-promotion .gs-title .gs-promotion-title-right * {
color: #000000;
}
.gs-promotion .gs-visibleUrl,
.gs-promotion .gs-visibleUrl-short {
color: #008000;
}
</style><style type="text/css">.gscb_a{display:inline-block;font:27px/13px arial,sans-serif}.gsst_a .gscb_a{color:#a1b9ed;cursor:pointer}.gsst_a:hover .gscb_a,.gsst_a:focus .gscb_a{color:#36c}.gsst_a{display:inline-block}.gsst_a{cursor:pointer;padding:0 4px}.gsst_a:hover{text-decoration:none!important}.gsst_b{font-size:16px;padding:0 2px;position:relative;user-select:none;-moz-user-select:none;white-space:nowrap}.gsst_e{opacity:0.55;}.gsst_a:hover .gsst_e,.gsst_a:focus .gsst_e{opacity:0.72;}.gsst_a:active .gsst_e{opacity:1;}.gsst_f{background:white;text-align:left}.gsst_g{background-color:white;border:1px solid #ccc;border-top-color:#d9d9d9;box-shadow:0 2px 4px rgba(0,0,0,0.2);-moz-box-shadow:0 2px 4px rgba(0,0,0,0.2);margin:-1px -3px;padding:0 6px}.gsst_h{background-color:white;height:1px;margin-bottom:-1px;position:relative;top:-1px}.gsib_a{width:100%;padding:4px 6px 0}.gsib_a,.gsib_b{vertical-align:top}.gssb_c{border:0;position:absolute;z-index:989}.gssb_e{border:1px solid #ccc;border-top-color:#d9d9d9;box-shadow:0 2px 4px rgba(0,0,0,0.2);-moz-box-shadow:0 2px 4px rgba(0,0,0,0.2);cursor:default}.gssb_f{visibility:hidden;white-space:nowrap}.gssb_k{border:0;display:block;position:absolute;top:0;z-index:988}.gsdd_a{border:none!important}.gsq_a{padding:0}.gscsep_a{display:none}.gssb_a{padding:0 7px}.gssb_a,.gssb_a td{white-space:nowrap;overflow:hidden;line-height:22px}#gssb_b{font-size:11px;color:#36c;text-decoration:none}#gssb_b:hover{font-size:11px;color:#36c;text-decoration:underline}.gssb_g{text-align:center;padding:8px 0 7px;position:relative}.gssb_h{font-size:15px;height:28px;margin:0.2em}.gssb_i{background:#eee}.gss_ifl{visibility:hidden;padding-left:5px}.gssb_i .gss_ifl{visibility:visible}a.gssb_j{font-size:13px;color:#36c;text-decoration:none;line-height:100%}a.gssb_j:hover{text-decoration:underline}.gssb_l{height:1px;background-color:#e5e5e5}.gssb_m{color:#000;background:#fff}.gsfe_a{border:1px solid #b9b9b9;border-top-color:#a0a0a0;box-shadow:inset 0px 1px 2px rgba(0,0,0,0.1);-moz-box-shadow:inset 0px 1px 2px rgba(0,0,0,0.1);-webkit-box-shadow:inset 0px 1px 2px rgba(0,0,0,0.1);}.gsfe_b{border:1px solid #4d90fe;outline:none;box-shadow:inset 0px 1px 2px rgba(0,0,0,0.3);-moz-box-shadow:inset 0px 1px 2px rgba(0,0,0,0.3);-webkit-box-shadow:inset 0px 1px 2px rgba(0,0,0,0.3);}.gssb_a{padding:0 7px}.gssb_e{border:0}.gssb_l{margin:5px 0}.gssb_c .gsc-completion-container{position:static}.gssb_c{z-index:5000}.gsc-completion-container table{background:transparent;font-size:inherit;font-family:inherit}.gssb_c > tbody > tr,.gssb_c > tbody > tr > td,.gssb_d,.gssb_d > tbody > tr,.gssb_d > tbody > tr > td,.gssb_e,.gssb_e > tbody > tr,.gssb_e > tbody > tr > td{padding:0;margin:0;border:0}.gssb_a table,.gssb_a table tr,.gssb_a table tr td{padding:0;margin:0;border:0}</style><link href="QML%20Syntax%20Basics%20_%20Qt%20QML%205.4_zh_files/sbi.css" rel="stylesheet" type="text/css" id="sbi-style"><script src="QML%20Syntax%20Basics%20_%20Qt%20QML%205.4_zh_files/a_002.txt" type="text/javascript"></script><script type="text/javascript" src="QML%20Syntax%20Basics%20_%20Qt%20QML%205.4_zh_files/jsapi"></script><link rel="stylesheet" href="QML%20Syntax%20Basics%20_%20Qt%20QML%205.4_zh_files/defaulten_004.css" type="text/css"><script src="QML%20Syntax%20Basics%20_%20Qt%20QML%205.4_zh_files/defaulten_004.js" type="text/javascript"></script><link rel="stylesheet" href="QML%20Syntax%20Basics%20_%20Qt%20QML%205.4_zh_files/defaulten_002.css" type="text/css"><script src="QML%20Syntax%20Basics%20_%20Qt%20QML%205.4_zh_files/defaulten.js" type="text/javascript"></script><script src="QML%20Syntax%20Basics%20_%20Qt%20QML%205.4_zh_files/a_002.htm" type="text/javascript"></script><style type="text/css">
.gsc-control-cse {
font-family: Arial, sans-serif;
border-color: #FFFFFF;
background-color: #FFFFFF;
}
.gsc-control-cse .gsc-table-result {
font-family: Arial, sans-serif;
}
input.gsc-input {
border-color: #D9D9D9;
}
input.gsc-search-button {
border-color: #5CAA15;
background-color: #5CAA15;
}
.gsc-tabHeader.gsc-tabhInactive {
border-color: #E9E9E9;
background-color: #E9E9E9;
}
.gsc-tabHeader.gsc-tabhActive {
border-top-color: #5CAA15;
border-left-color: #E9E9E9;
border-right-color: #E9E9E9;
background-color: #FFFFFF;
}
.gsc-tabsArea {
border-color: #E9E9E9;
}
.gsc-webResult.gsc-result,
.gsc-results .gsc-imageResult {
border-color: #FFFFFF;
background-color: #FFFFFF;
}
.gsc-webResult.gsc-result:hover,
.gsc-imageResult:hover {
border-color: #FFFFFF;
background-color: #FFFFFF;
}
.gsc-webResult.gsc-result.gsc-promotion:hover {
border-color: #FFFFFF;
background-color: #FFFFFF;
}
.gs-webResult.gs-result a.gs-title:link,
.gs-webResult.gs-result a.gs-title:link b,
.gs-imageResult a.gs-title:link,
.gs-imageResult a.gs-title:link b {
color: #5CAA15;
}
.gs-webResult.gs-result a.gs-title:visited,
.gs-webResult.gs-result a.gs-title:visited b,
.gs-imageResult a.gs-title:visited,
.gs-imageResult a.gs-title:visited b {
color: #46A2DA;
}
.gs-webResult.gs-result a.gs-title:hover,
.gs-webResult.gs-result a.gs-title:hover b,
.gs-imageResult a.gs-title:hover,
.gs-imageResult a.gs-title:hover b {
color: #46A2DA;
}
.gs-webResult.gs-result a.gs-title:active,
.gs-webResult.gs-result a.gs-title:active b,
.gs-imageResult a.gs-title:active,
.gs-imageResult a.gs-title:active b {
color: #5CAA15;
}
.gsc-cursor-page {
color: #5CAA15;
}
a.gsc-trailing-more-results:link {
color: #5CAA15;
}
.gs-webResult .gs-snippet,
.gs-imageResult .gs-snippet,
.gs-fileFormatType {
color: #404244;
}
.gs-webResult div.gs-visibleUrl,
.gs-imageResult div.gs-visibleUrl {
color: #5CAA15;
}
.gs-webResult div.gs-visibleUrl-short {
color: #5CAA15;
}
.gs-webResult div.gs-visibleUrl-short {
display: none;
}
.gs-webResult div.gs-visibleUrl-long {
display: block;
}
.gs-promotion div.gs-visibleUrl-short {
display: none;
}
.gs-promotion div.gs-visibleUrl-long {
display: block;
}
.gsc-cursor-box {
border-color: #FFFFFF;
}
.gsc-results .gsc-cursor-box .gsc-cursor-page {
border-color: #E9E9E9;
background-color: #FFFFFF;
color: #5CAA15;
}
.gsc-results .gsc-cursor-box .gsc-cursor-current-page {
border-color: #5CAA15;
background-color: #FFFFFF;
color: #46A2DA;
}
.gsc-webResult.gsc-result.gsc-promotion {
border-color: #404244;
background-color: #FFFFFF;
}
.gsc-completion-title {
color: #5CAA15;
}
.gsc-completion-snippet {
color: #404244;
}
.gs-promotion a.gs-title:link,
.gs-promotion a.gs-title:link *,
.gs-promotion .gs-snippet a:link {
color: #0000CC;
}
.gs-promotion a.gs-title:visited,
.gs-promotion a.gs-title:visited *,
.gs-promotion .gs-snippet a:visited {
color: #0000CC;
}
.gs-promotion a.gs-title:hover,
.gs-promotion a.gs-title:hover *,
.gs-promotion .gs-snippet a:hover {
color: #0000CC;
}
.gs-promotion a.gs-title:active,
.gs-promotion a.gs-title:active *,
.gs-promotion .gs-snippet a:active {
color: #0000CC;
}
.gs-promotion .gs-snippet,
.gs-promotion .gs-title .gs-promotion-title-right,
.gs-promotion .gs-title .gs-promotion-title-right * {
color: #000000;
}
.gs-promotion .gs-visibleUrl,
.gs-promotion .gs-visibleUrl-short {
color: #008000;
}
</style></head>
<body>

<div class="main">
<div class="main-rounded">

<div class="content">
    <div class="line">
        <div class="content mainContent">

<a name="qml-object-declarations"></a><div class="context">
<h1 class="title">QML 基本语法</h1>
<span class="subtitle"></span>
<!-- $$$qtqml-syntax-basics.html-description -->
<div class="descr"> <a name="details"></a>
<p>QML 是一种多范式语言, 多范式语言允许对象定义自己的属性以及关联和应对其他对象的改变。
	相对于命令式代码,要是想改变属性和行为需要通过一系列的语句一步步来处理,
	QML的声明式语法在个别对象上直接集成了属性和行为改变.
	属性的定义在命令式语言里必须通过复杂的定制应用行为来实现.
</p>
<p>QML 源代码一般是通过QML 引擎来载入的<i>文档</i>, QML 文档(documents)是独立的QML代码文件. 
	QML文档可以用于定义<a href="http://doc.qt.io/qt-5/qtqml-typesystem-objecttypes.html">QML对象类型</a> 
	然后就可以在应用中到处使用了</p>
<a name="import-statements"></a>
<h2 id="import-statements">Import 语句</h2>
<p>一个QML文档可以在文件的顶部有一个或更多的import语句. 一个import可以是其中的任何一个:</p>
<ul>
<li>一个版本化的命名空间其类型已经注册 (比如通过plugin)</li>
<li>一个包含类型定义的QML文档的相对路径</li>
<li>一个JavaScript文件</li>
</ul>
<p>JavaScript 文件import的时候必须是合格的, 这样属性和方法才能可以被访问.</p>
<p>一般的输入形式如下:</p>
<ul>
<li><code>import 命名空间(Namespace) 主要版本(VersionMajor).次要版本(VersionMinor)</code></li>
<li><code>import 命名空间(Namespace) 主要版本(VersionMajor).次要版本(VersionMinor) as 唯一的类型识别标识(SingletonTypeIdentifier)</code></li>
<li><code>import "目录(directory)"</code></li>
<li><code>import "file.js" as 脚本识别标识(ScriptIdentifier)</code></li>
</ul>
<p>举例:</p>
<ul>
<li><code>import <a href="http://doc.qt.io/qt-5/qtquick-module.html">QtQuick</a> 2.0</code></li>
<li><code>import <a href="http://doc.qt.io/qt-5/qtquick-module.html">QtQuick</a>.LocalStorage 2.0 as Database</code></li>
<li><code>import "../privateComponents"</code></li>
<li><code>import "somefile.js" as Script</code></li>
</ul>
<p>请参看 <a href="http://doc.qt.io/qt-5/qtqml-syntax-imports.html">QML 语法 - Import 语句</a> 文档深入了解QML import相关知识.</p>
<a name="object-declarations"></a>
<h2 id="object-declarations">对象声明</h2>
<p>语法上来说,  QML代码块定义了一个要被创建的QML 对象树.对象定义是使用<i>对象声明</i>
 描述一个将要创建的对象的类型以及对象所具有的特性(attributes).每个对象可以使用嵌套的对象声明来声明子对象.</p>
<p>对象声明的组成是有对象类型，紧跟的一组花括号.所有的特性(attributes)和子对象都在这些括号内声明.</p>
<p>这里给一个简单的对象声明例子:</p>
<pre class="qml"><span class="type"><a href="http://doc.qt.io/qt-5/qml-qtquick-rectangle.html">Rectangle</a></span> {
    <span class="name">width</span>: <span class="number">100</span>
    <span class="name">height</span>: <span class="number">100</span>
    <span class="name">color</span>: <span class="string">"red"</span>
}</pre>
<p>这声明了一个对象类型<a href="http://doc.qt.io/qt-5/qml-qtquick-rectangle.html">Rectangle</a>, 跟随一组花括号包括了定义对象的特性(attributes).  <a href="http://doc.qt.io/qt-5/qml-qtquick-rectangle.html">Rectangle</a>类型可以被<code>QtQuick</code>模块使用, 定义的特性的属性值<code>width</code>, <code>height</code>和 <code>color</code> . (这些就是类型<a href="http://doc.qt.io/qt-5/qml-qtquick-rectangle.html">Rectangle</a> 的属性,通过<a href="http://doc.qt.io/qt-5/qml-qtquick-rectangle.html">Rectangle</a> 文档的描述)</p>
<p>上面对象如果在<a href="http://doc.qt.io/qt-5/qtqml-documents-topic.html">QML文档</a>里就可以被引擎载入. 如果源代码使用import<code>QtQuick</code>模块 (这样才能使<a href="http://doc.qt.io/qt-5/qml-qtquick-rectangle.html">Rectangle</a>类型可用),如下:</p>
<pre class="qml">import QtQuick 2.0

<span class="type"><a href="http://doc.qt.io/qt-5/qml-qtquick-rectangle.html">Rectangle</a></span> {
    <span class="name">width</span>: <span class="number">100</span>
    <span class="name">height</span>: <span class="number">100</span>
    <span class="name">color</span>: <span class="string">"red"</span>
}</pre>
<p>当将该代码放入<code>.qml</code>文件然后由QML引擎载入,上面代码创建<a href="http://doc.qt.io/qt-5/qml-qtquick-rectangle.html">Rectangle</a>对象根据由<code>QtQuick</code>模块提供的<a href="http://doc.qt.io/qt-5/qml-qtquick-rectangle.html">Rectangle</a>类型供:</p>
<p class="centerAlign"><img src="QML%20Syntax%20Basics%20_%20Qt%20QML%205.4_zh_files/qtqml-syntax-basics-object-declaration.png" alt=""></p><p><b>说明: </b>If
 如果一个对象只是定义小数目的属性可以按照下面的语法书写在一行内,属性由分号;来分开 :</p><pre class="qml"><span class="type"><a href="http://doc.qt.io/qt-5/qml-qtquick-rectangle.html">Rectangle</a></span> { <span class="name">width</span>: <span class="number">100</span>; <span class="name">height</span>: <span class="number">100</span>; <span class="name">color</span>: <span class="string">"red"</span> }</pre>
<p>很明显,<a href="http://doc.qt.io/qt-5/qml-qtquick-rectangle.html">Rectangle</a>
 对象在本例中声明的非常的简单, 除了定义一些属性值外没有其他任何东西. 为了建立更有用的对象,一个对象可以声明更多的其他特性:这些可以参看文档 <a href="http://doc.qt.io/qt-5/qtqml-syntax-objectattributes.html">QML 对象特性</a> 文档. 另外,对象声明可以顶子对象如下讨论:.</p>
<a name="child-objects"></a>
<h3>子对象</h3>
<p>任何对象声明可以通过嵌套对象声明来定义子对象. 通过这种方式,<b>任何对象声明都隐含的声明了一个对象树可以包含任意数目的子对象</b>.</p>
<p>比如<a href="http://doc.qt.io/qt-5/qml-qtquick-rectangle.html">Rectangle</a> 对象声明如下包含一个<a href="http://doc.qt.io/qt-5/qml-qtquick-gradient.html">Gradient</a>对象声明, 其包含两个<a href="http://doc.qt.io/qt-5/qml-qtquick-gradientstop.html">GradientStop</a>声明:</p>
<pre class="qml">import QtQuick 2.0

<span class="type"><a href="http://doc.qt.io/qt-5/qml-qtquick-rectangle.html">Rectangle</a></span> {
    <span class="name">width</span>: <span class="number">100</span>
    <span class="name">height</span>: <span class="number">100</span>

    <span class="name">gradient</span>: <span class="name">Gradient</span> {
        <span class="type"><a href="http://doc.qt.io/qt-5/qml-qtquick-gradientstop.html">GradientStop</a></span> { <span class="name">position</span>: <span class="number">0.0</span>; <span class="name">color</span>: <span class="string">"yellow"</span> }
        <span class="type"><a href="http://doc.qt.io/qt-5/qml-qtquick-gradientstop.html">GradientStop</a></span> { <span class="name">position</span>: <span class="number">1.0</span>; <span class="name">color</span>: <span class="string">"green"</span> }
    }
}</pre>
<p>当这段代码被引擎载入后,引擎将建立一个对象树其中对象<a href="http://doc.qt.io/qt-5/qml-qtquick-rectangle.html">Rectangle</a>在根部; 这个对象有<a href="http://doc.qt.io/qt-5/qml-qtquick-gradient.html">Gradient</a> 子对象,该对象有2个<a href="http://doc.qt.io/qt-5/qml-qtquick-gradientstop.html">GradientStop</a>孩子.</p>
<p>说明:, 在QML对象树上下文中这是一个父子关系,而不是在可视场景上下文中.在可视场景中的父子关系的概念是由来自<code>QtQuick</code>模块的
<a href="http://doc.qt.io/qt-5/qml-qtquick-item.html">Item</a>类型引申出来的 , Item是绝大多数QML类型的基础类型,同时也是可以可视化渲染的绝大多数QML对象的基类. 举例<a href="http://doc.qt.io/qt-5/qml-qtquick-rectangle.html">Rectangle</a>和 <a href="http://doc.qt.io/qt-5/qtquick-releasenotes.html#text">Text</a> 都属于<a href="http://doc.qt.io/qt-5/qml-qtquick-item.html">Item</a>-基础的类型,下面的<a href="http://doc.qt.io/qt-5/qtquick-releasenotes.html#text">Text</a>对象输入已经声明了一个可视化<a href="http://doc.qt.io/qt-5/qml-qtquick-rectangle.html">Rectangle</a>对象的子对象:</p>
<pre class="qml">import QtQuick 2.0

<span class="type"><a href="http://doc.qt.io/qt-5/qml-qtquick-rectangle.html">Rectangle</a></span> {
    <span class="name">width</span>: <span class="number">200</span>
    <span class="name">height</span>: <span class="number">200</span>
    <span class="name">color</span>: <span class="string">"red"</span>

    <span class="type"><a href="http://doc.qt.io/qt-5/qml-qtquick-text.html">Text</a></span> {
        <span class="name">anchors</span>.centerIn: <span class="name">parent</span>
        <span class="name">text</span>: <span class="string">"Hello, QML!"</span>
    }
}</pre>
<p>上面代码里的<a href="http://doc.qt.io/qt-5/qtquick-releasenotes.html#text">Text</a> 对象引用它的 <a href="http://doc.qt.io/qt-5/qml-qtquick-item.html#parent-prop">parent</a> 值, 这是应用它的<i>可视化父亲</i>,而不是在对象树里的父亲.这种情况下,它们其实是一致的:<a href="http://doc.qt.io/qt-5/qml-qtquick-rectangle.html">Rectangle</a> 对象是<a href="http://doc.qt.io/qt-5/qtquick-releasenotes.html#text">Text</a>对象在QLM对象树和可视化场景上下文中的付清. 但是总要区别 <a href="http://doc.qt.io/qt-5/qml-qtquick-item.html#parent-prop">parent</a>
 属性在可视化父亲里可以修改，但在对象树上下文中的父亲不能通过QML来修改</p>
<p>(另外的,注意<a href="http://doc.qt.io/qt-5/qtquick-releasenotes.html#text">Text</a>对象在声明的时候并没有赋值给<a href="http://doc.qt.io/qt-5/qml-qtquick-rectangle.html">Rectangle</a>的一个属性, 不像先前的例子赋予<a href="http://doc.qt.io/qt-5/qml-qtquick-gradient.html">Gradient</a> 对象到rectangle的 <code>gradient</code>属性. 这是因为<a href="http://doc.qt.io/qt-5/qml-qtquick-item.html">Item</a>的<a href="http://doc.qt.io/qt-5/qml-qtquick-item.html#children-prop">children</a> 属性已经作为类型的<a href="http://doc.qt.io/qt-5/qtqml-syntax-objectattributes.html#default-properties">默认属性(default property)</a>更加方便的语法.)</p>
<p>参看<a href="http://doc.qt.io/qt-5/qtquick-visualcanvas-visualparent.html">可视化父亲(visual parent)</a> 文档了解更多有关<a href="http://doc.qt.io/qt-5/qml-qtquick-item.html">Item</a>类型可视化父亲更多的信息.</p>
<a name="comments"></a>
<h2 id="comments">注释语句</h2>
<p>QLM的注释语法和JavaScript语法相似:</p>
<ul>
<li>单行注释开始以//结束到行尾.</li>
<li>多行注释开始以/* 结束以*/</li>
</ul>
<pre class="qml"><span class="type"><a href="http://doc.qt.io/qt-5/qml-qtquick-text.html">Text</a></span> {
    <span class="name">text</span>: <span class="string">"Hello world!"</span>    <span class="comment">//a basic greeting</span>
    <span class="comment">/*
        We want this text to stand out from the rest so
        we give it a large size and different font.
     */</span>
    <span class="name">font</span>.family: <span class="string">"Helvetica"</span>
    <span class="name">font</span>.pointSize: <span class="number">24</span>
}</pre>
<p>注释行在引擎处理QML代码的时候被忽略掉. 注释主要用于解释代码的用户，以及以后日期的参考或者解释实现给其他人</p>
<p>注释也用于阻止代码执行,这对追踪问题的时候非常有用.</p>
<pre class="qml">    <span class="type"><a href="http://doc.qt.io/qt-5/qml-qtquick-text.html">Text</a></span> {
        <span class="name">text</span>: <span class="string">"Hello world!"</span>
        <span class="comment">//opacity: 0.5</span>
    }</pre>
<p>上面的例子中<a href="http://doc.qt.io/qt-5/qtquick-releasenotes.html#text">Text</a>对象具有正常的不透明(opacity)值 因为该行 opacity: 0.5 被注释掉了</p>
</div>
<!-- @@@qtqml-syntax-basics.html -->
   </div>
   
</div>
</div>
</div>
</div>
</div>



<table class="gstl_50 gssb_c" style="width: 469px; display: none; top: 172px; position: absolute; left: 503px;" cellpadding="0" cellspacing="0"><tbody><tr><td class="gssb_f"></td><td style="width: 100%;" class="gssb_e"></td></tr></tbody></table><div style="left: 0px; top: 0px; position: absolute; width: 29px; height: 27px; border: medium none; margin: 0px; padding: 0px; z-index: 2147483647; display: none;" class="sbi_search" id="sbi_camera_button"></div><div style="left: 0px; top: 0px; position: absolute; width: 29px; height: 27px; border: medium none; margin: 0px; padding: 0px; z-index: 2147483647; display: none;" class="sbi_search" id="sbi_camera_button"></div></body></html>